@page
@model ValleyVisionSolution.Pages.SpendingProjection.SpendingProjectionPageModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Spending Projection";
    var jsonData = JsonConvert.SerializeObject(Model.ProjectedExpenditures);
}
<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    .parameterTitle {
        font-size: 0.8vw;
    }

    .chart-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto;
        grid-template-areas:
            "ChartA ChartB"
            "ChartC ChartC";
        gap: 2vw;
    }

    #chartA {
        grid-area: ChartA;
    }

    #chartB {
        grid-area: ChartB;
    }

    #chartC {
        grid-area: ChartC;
    }

    .dashboard-tile {
        font-size: max(1.25vw, 10px);
    }

    .dashboard-tile-title-bar {
        position: relative;
        background-color: #274C77;
        width: 100%;
        height: 1.75em;
        display: flex;
        align-items: center;
    }

    .dashboard-tile-title {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        margin: 0;
        color: #fff;
        /*font-size:1vw;*/
    }

    .dashboard-tile-contents {
        padding: 3%;
        background-color: #f2f2f2;
    }

</style>
<form method="post" asp-page="/SpendingProjectionPage">
    <div class="row mb-3">
        <div class="col-md-2">
            <div class="parameterTitle">Inflation Rate %:</div>
            <input asp-for="@Model.ParameterInflationRate" type="text" class="form-control">
        </div>
        <div class="col-md-2">
            <div class="parameterTitle">Interest Rate %:</div>
            <input asp-for="@Model.ParameterInterestRate" type="text" class="form-control">
        </div>
        <div class="col-md-2">
            <div class="parameterTitle">Anomaly Amount:</div>
            <input asp-for="@Model.ParameterAnomaly" type="text" class="form-control">
        </div>
        <div class="col-md-2">
            <div class="parameterTitle">Number of Projection Years:</div>
            <select asp-for="@Model.NumProjectionYears" class="form-control">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
            </select>
        </div>
        <div class="col-md-2 d-flex flex-column justify-content-end">
            <button type="submit" class="btn btn-primary" id="runProjectionBtn" asp-page-handler="ProjectExpenditures">Run Projection</button>
        </div>
    </div>
</form>
<div class="chart-grid">
    <div class="dashboard-tile" id="chartA">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Total Projected Expenditure</div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartA"></canvas>
        </div>
    </div>
    <div class="dashboard-tile" id="chartB">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Projected Expenditure by Category</div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartB"></canvas>
        </div>
    </div>
    <div class="dashboard-tile" id="chartC">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Total Expenditure and Tax Category Projection </div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartC"></canvas>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var rawData = @Html.Raw(Model.GetChartDataAsJson());
        var expenditureLabels = ['PublicSafety', 'School', 'Anomaly', 'Other'];
        var colors = ['rgba(16, 41, 80, 1)', 'rgba(39, 76, 119, 1)', 'rgba(175, 184, 202, 1)', 'rgba(183, 191, 174, 1)', 'rgba(146, 157, 133, 1)', 'rgba(199, 157, 133, 1)'];

        function createChart(chartId, type, labels, yAxisSettings) {
            var datasets = labels.map((label, index) => {
                var yAxisID = label === 'InflationRate' || label === 'InterestRate' ? 'y1' : 'y';
                return {
                    label: label,
                    data: rawData.map(item => item[label]),
                    backgroundColor: colors[index % colors.length],
                    borderColor: colors[index % colors.length],
                    borderWidth: 2,
                    fill: type !== 'line',
                    yAxisID: yAxisID
                };
            });

            var ctx = document.getElementById(chartId).getContext('2d');
            return new Chart(ctx, {
                type: type,
                data: {
                    labels: rawData.map(item => item.Year.toString()),
                    datasets: datasets
                },
                options: {
                    scales: yAxisSettings,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        var yAxisExpenditureSettings = {
            y: { beginAtZero: true, title: { display: true, text: 'Expenditure ($)' } },
            y1: {
                beginAtZero: true,
                position: 'right',
                title: { display: true, text: 'Rate (%)' },
                grid: { drawOnChartArea: false }
            }
        };

        // createChart('expenditureChartA', 'bar', ['TotalExpenditure'], { y: { beginAtZero: true, title: { display: true, text: 'Total Expenditure ($)' } } });
        // createChart('expenditureChartB', 'bar', expenditureLabels, { y: { beginAtZero: true, title: { display: true, text: 'Category Expenditure ($)' } } });
        // createChart('expenditureChartC', 'line', [...expenditureLabels, 'InflationRate', 'InterestRate'], yAxisExpenditureSettings);
    });
</script>
