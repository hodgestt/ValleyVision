@page
@model ValleyVisionSolution.Pages.SpendingProjection.SpendingProjectionPageModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Spending Projection";
    var jsonData = JsonConvert.SerializeObject(Model.ProjectedExpenditures2);
}
<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    .parameterTitle {
        font-size: 0.8vw;
    }

    .chart-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto;
        grid-template-areas:
            "ChartA ChartB"
            "ChartC ChartD";
        gap: 2vw;
    }

    #chartA {
        grid-area: ChartA;
    }

    #chartB {
        grid-area: ChartB;
    }

    #chartC {
        grid-area: ChartC;
    }

    #chartD {
        grid-area: ChartD;
    }

    .dashboard-tile {
        font-size: max(1.25vw, 10px);
    }

    .dashboard-tile-title-bar {
        position: relative;
        background-color: #274C77;
        width: 100%;
        height: 1.75em;
        display: flex;
        align-items: center;
    }

    .dashboard-tile-title {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        margin: 0;
        color: #fff;
        font-size:1vw;
    }

    .dashboard-tile-contents {
        padding: 3%;
        background-color: #f2f2f2;
    }

    .manualInflationContainer{
        display:grid;
        grid-template-columns:0.1fr 1fr;
        grid-template-areas:
        "Box Title";
    }
    .manualInflationBox{
        grid-area:Box;
    }
    .manualInflationTitle{
        grid-area:Title;
    }

</style>
@* <form method="post" asp-page="/SpendingProjectionPage">
    <div class="row mb-3">
        <div class="col-md-2">
            <div class="parameterTitle">Anomaly Amount:</div>
            <input asp-for="@Model.ParameterAnomaly" type="text" class="form-control">
        </div>
        <div class="col-md-2">
            <div class="parameterTitle">Number of Projection Years:</div>
            <select asp-for="@Model.NumProjectionYears" class="form-select form-control">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
            </select>
        </div>
        <div class="col-md-2">
            <div style="display:flex">
                <input style="margin-right:0.5vw" class="form-check-input parameterTitle" type="checkbox" id="manualInflationRate">
                <label class="form-check-label parameterTitle" for="manualInflationRate">
                     Manually Set Inflation Rate
                </label>
                <!-- Input for inflation rate, initially hidden -->
                <input asp-for="@Model.ParameterInflationRate" type="text" class="form-control" id="inflationRateInput" style="display: none;">
            </div>

        </div>
        <div class="col-md-2 d-flex flex-column justify-content-end">
            <button type="submit" class="btn btn-primary" id="runProjectionBtn" asp-page-handler="ProjectExpenditures2">Run Projection</button>
        </div>
    </div>
</form> *@

<form method="post" asp-page="/SpendingProjectionPage">
    <div class="row mb-3">
        <div class="col-md-2">
            <div class="parameterTitle">Anomaly Amount:</div>
            <input asp-for="@Model.ParameterAnomaly" type="text" class="form-control">
        </div>
        <div class="col-md-2">
            <div class="parameterTitle">Number of Projection Years:</div>
            <select asp-for="@Model.NumProjectionYears" class="form-select form-control">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
            </select>
        </div>
        <div class="col-md-2">
            <div class="manualInflationContainer">
                <input style="margin-right: 0.5vw" class="form-check-input parameterTitle manualInflationBox" type="checkbox" id="manualInflationRate">
                <label class="form-check-label parameterTitle manualInflationTitle">
                    Manually Set Inflation Rate
                </label>
            </div>
            <!-- Input for inflation rate, initially hidden -->
            <input asp-for="@Model.ParameterInflationRate" type="text" class="form-control" id="inflationRateInput" style="display: none;">
        </div>
       
        <div class="col-md-2 d-flex flex-column justify-content-end">
            <button type="submit" class="btn btn-primary" id="runProjectionBtn" asp-page-handler="ProjectExpenditures2">Run Projection</button>
        </div>
    </div>
</form>


<div class="chart-grid">
    <div class="dashboard-tile" id="chartA">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Projected Range of Total Expenditure</div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartA"></canvas>
        </div>
    </div>
    <div class="dashboard-tile" id="chartB">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Projected Subcategory Expenditure</div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartB"></canvas>
        </div>
    </div>
    <div class="dashboard-tile" id="chartC">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Projected Total Expenditure + Inflation</div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartC"></canvas>
        </div>
    </div>
    <div class="dashboard-tile" id="chartD">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Projected Subcategory Expenditure + Inflation</div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartD"></canvas>
        </div>
    </div>
</div>
<div style="display: flex; justify-content: flex-end; margin-top: 10px;">
    <form method="post" asp-page-handler="DownloadExcel">
        <button type="submit" class="btn btn-secondary">Download Report</button>
    </form>
    <form method="post" asp-page-handler="SaveExcel" style="margin-left: 10px;">
        <button type="submit" class="btn btn-primary">Save to Resources</button>
    </form>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var rawData = @Html.Raw(Model.GetChartDataAsJson());
        var yearLabels = rawData.map(item => item.Year.toString());

        // Data preparation
        var totalExpenditureData = rawData.map(item => item.TotalExpenditure);
        var upperConfidenceData = rawData.map(item => item.TotalExpenditureUCL || null);
        var lowerConfidenceData = rawData.map(item => item.TotalExpenditureLCL || null);

        var ctx = document.getElementById('expenditureChartA').getContext('2d');
        var expenditureChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: yearLabels,
                datasets: [
                    {
                        label: 'Upper Confidence Limit',
                        data: upperConfidenceData,
                        borderColor: 'rgba(255, 190, 91, 0.4)',
                        backgroundColor: 'rgba(255, 190, 91, 0.4)',
                        fill: +1,
                        borderWidth: 2
                    },
                    {
                        label: 'Total Expenditure',
                        data: totalExpenditureData,
                        borderColor: 'rgba(96, 150, 186, 1)',
                        backgroundColor: 'rgba(96, 150, 186, 1)',
                        fill: false,
                        borderWidth: 2
                    },
                    {
                        label: 'Lower Confidence Limit',
                        data: lowerConfidenceData,
                        borderColor: 'rgba(185, 209, 138, 0.4)',
                        backgroundColor: 'rgba(185, 209, 138, 0.4)',
                        fill: +1,
                        borderWidth: 2
                    }
                ]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: false,
                        title: { display: true, text: 'Total Expenditure ($)' }
                    }
                },
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

       

        var expenditureLabels = [
            { key: 'PublicSafety', label: 'Public Safety' },
            { key: 'School', label: 'School Funding' },
            { key: 'Other', label: 'Other' },
            { key: 'Anomaly', label: 'Anomaly' }  // Moved to the last position
        ];
        
        var colors = ['rgba(255, 190, 91, 1)', 'rgba(96, 150, 186, 1)', 'rgba(185, 209, 138, 1)', 'rgba(174, 174, 212, 1', 'rgba(39, 76, 119, 1)'];

        function createChart(chartId, type, labels, yAxisSettings) {
            
            var datasets = labels.map((item, index) => {
                var chartType = item.key === 'InflationRate' ? 'line' : type; // Use 'line' for Inflation Rate, otherwise use the chart type passed in function
                var yAxisID = item.key === 'InflationRate' ? 'y1' : 'y';
                var datasetOrder = item.key === 'InflationRate' ? 1 : 2; // Lower order for line to bring it to front

                // Apply custom color if provided, else default to colors array
                var datasetColor = item.color ? item.color : colors[index % colors.length];

                return {
                    type: chartType, // Assign type here
                    label: item.label,
                    data: rawData.map(data => data[item.key]),
                    backgroundColor: datasetColor,
                    borderColor: datasetColor,
                    borderWidth: 2,
                    fill: item.key === 'InflationRate' ? false : type !== 'line', // No fill for line charts
                    yAxisID: yAxisID,
                    order: datasetOrder // Set order to control drawing sequence
                };
            });

            var ctx = document.getElementById(chartId).getContext('2d');
            return new Chart(ctx, {
                type: 'bar', // Default type for the chart
                data: {
                    labels: rawData.map(item => item.Year.toString()),
                    datasets: datasets
                },
                options: {
                    scales: yAxisSettings,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }



        var yAxisExpenditureSettings = {
            y: { beginAtZero: true, title: { display: true, text: 'Category Expenditure ($)' } },
            y1: {
                beginAtZero: true,
                position: 'right',
                title: { display: true, text: 'Rate (%)' },
                grid: { drawOnChartArea: false }
            }
            
        };

        createChart('expenditureChartB', 'bar', expenditureLabels, { y: { beginAtZero: false, title: { display: true, text: 'Category Expenditure ($)' } } });
        
        
        createChart('expenditureChartC', 'bar', [
            { key: 'TotalExpenditure', label: 'Total Expenditure', color: 'rgba(96, 150, 186, 1)' },
            { key: 'InflationRate', label: 'Inflation Rate', color: 'rgba(39, 76, 119, 1)' }
        ], {
            y: {
                beginAtZero: true,
                title: { display: true, text: 'Total Expenditure ($)' }
            },
            y1: {
                beginAtZero: true,
                position: 'right',
                title: { display: true, text: 'Rate (%)' },
                grid: { drawOnChartArea: false },
                ticks: {
                    callback: function (value) {
                        return (value * 100).toFixed(0) + '%'; // Convert decimal to percentage
                    }
                }
            }
        });
        createChart('expenditureChartD', 'line', [...expenditureLabels, { key: 'InflationRate', label: 'Inflation Rate' }], yAxisExpenditureSettings);

        
        
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
    @if (TempData["Message"] != null)
    {
        <text>
                        var message = JSON.parse('@Json.Serialize(TempData["Message"])');
            alert(message);
        </text>
    }
        });
</script>
@* <script>
    document.addEventListener('DOMContentLoaded', function () {
        var checkbox = document.getElementById('manualInflationRate');
        var inflationInput = document.getElementById('inflationRateInput');
        var inflationRateTitle = document.getElementById('inflationRateTitle');

        // Function to toggle visibility based on the checkbox state
        function toggleVisibility() {
            if (checkbox.checked) {
                inflationRateTitle.style.display = 'block'; // Show the title
                inflationInput.style.display = 'block';     // Show the input
            } else {
                inflationRateTitle.style.display = 'none';  // Hide the title
                inflationInput.style.display = 'none';      // Hide the input
            }
        }

        // Set initial visibility based on checkbox state at load
        toggleVisibility();

        // Event listener for changes in checkbox state
        checkbox.addEventListener('change', toggleVisibility);
    });
</script> *@

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var checkbox = document.getElementById('manualInflationRate');
        var inflationInput = document.getElementById('inflationRateInput');

        // Function to toggle the visibility of the inflation rate input
        function toggleInflationInput() {
            inflationInput.style.display = checkbox.checked ? 'block' : 'none';  // Toggles display based on checkbox
        }

        // Initialize input visibility based on checkbox state when the page loads
        toggleInflationInput();

        // Event listener for checkbox changes
        checkbox.addEventListener('change', toggleInflationInput);
    });
</script>


