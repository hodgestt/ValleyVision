@page
@model ValleyVisionSolution.Pages.HistoricalSpending.HistoricalSpendingPageModel
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Historical Spending";
    var jsonData = JsonConvert.SerializeObject(Model.HistoricalExpenditures);
}
<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    .parameterTitle {
        font-size: 12.5px;
    }

    .chart-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto;
        grid-template-areas:
            "ChartA ChartB"
            "ChartC ChartD";
        gap: 2vw;
    }

    #chartA {
        grid-area: ChartA;
    }

    #chartB {
        grid-area: ChartB;
    }

    #chartC {
        grid-area: ChartC;
    }

    #chartD {
        grid-area: ChartD;
    }

    .dashboard-tile {
        font-size: max(1.25vw, 10px);
    }

    .dashboard-tile-title-bar {
        position: relative;
        background-color: #274C77;
        width: 100%;
        height: 1.75em;
        display: flex;
        align-items: center;
    }

    .dashboard-tile-title {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        margin: 0;
        color: #fff;
        font-size:1vw;
        white-space: nowrap;
    }

    .dashboard-tile-contents {
        padding: 3%;
        background-color: #f2f2f2;
    }

</style>

<div class="chart-grid">
    <div class="dashboard-tile" id="chartA">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Historic Total Expenditure</div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartA"></canvas>
        </div>
    </div>
    <div class="dashboard-tile" id="chartB">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Historic Subcategory Expenditure</div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartB"></canvas>
        </div>
    </div>
    <div class="dashboard-tile" id="chartC">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Historic Total Expenditure + Inflation </div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartC"></canvas>
        </div>
    </div>
    <div class="dashboard-tile" id="chartD">
        <div class="dashboard-tile-title-bar">
            <div class="dashboard-tile-title">Historic Subcategory Expenditure + Inflation </div>
        </div>
        <div class="dashboard-tile-contents">
            <canvas id="expenditureChartD"></canvas>
        </div>
    </div>
</div>
<br />
<div style="display: flex; justify-content: flex-end; margin-bottom: 10px;">

    <a asp-page="/HistoricalSpending/ViewDataPage" class="btn btn-primary" style="margin-right: 10px;">View Historical Data</a>

    <form method="post" asp-page-handler="DownloadExcel">
        <button type="submit" class="btn btn-secondary">Download Report</button>
    </form>

    <form method="post" asp-page-handler="SaveExcel" style="margin-left: 10px;">
        <button type="submit" class="btn btn-primary">Save to Resources</button>
    </form>

</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var rawData = @Html.Raw(Model.GetChartDataAsJson());
        var expenditureLabels = ['PublicSafety', 'School', 'Other', 'Anomaly'];
        var colors = ['rgba(255, 190, 91, 1)', 'rgba(96, 150, 186, 1)', 'rgba(185, 209, 138, 1)', 'rgba(174, 174, 212, 1)', 'rgba(39, 76, 119, 1)'];

        function formatLabel(label) {
            // Change to format label, e.g., add spaces before uppercase letters after the first one
            return label.replace(/(\B[A-Z])/g, ' $1');
        }

        function createChart(chartId, type, labels, yAxisSettings, customColors = {}) {
            var datasets = labels.map((label, index) => {
                var formattedLabel = formatLabel(label); // Apply label formatting
                var yAxisID = label === 'InflationRate' ? 'y1' : 'y';
                var backgroundColor = customColors[label] || colors[index % colors.length]; // Apply custom color or default
                var borderColor = customColors[label] || colors[index % colors.length];

                return {
                    label: formattedLabel, // Use formatted label here
                    data: rawData.map(item => item[label]),
                    backgroundColor: backgroundColor,
                    borderColor: borderColor,
                    borderWidth: 2,
                    fill: type !== 'line',
                    yAxisID: yAxisID
                };
            });

            var ctx = document.getElementById(chartId).getContext('2d');
            return new Chart(ctx, {
                type: type,
                data: {
                    labels: rawData.map(item => item.Year.toString()),
                    datasets: datasets
                },
                options: {
                    scales: yAxisSettings,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        var yAxisExpenditureSettings = {
            y: { beginAtZero: true, title: { display: true, text: 'Expenditure ($)' } },
            y1: {
                beginAtZero: true,
                position: 'right',
                title: { display: true, text: 'Rate' },
                grid: { drawOnChartArea: false }
            }
        };

        createChart('expenditureChartA', 'bar', ['TotalExpenditure'], { y: { beginAtZero: true, title: { display: true, text: 'Total Expenditure ($)' } } }, { 'TotalExpenditure': 'rgba(96, 150, 186, 1)' });
        createChart('expenditureChartB', 'bar', expenditureLabels, { y: { beginAtZero: true, title: { display: true, text: 'Category Expenditure ($)' } } });
        createChart('expenditureChartC', 'line', ['TotalExpenditure', 'InflationRate'], yAxisExpenditureSettings, {
            'TotalExpenditure': 'rgba(96, 150, 186, 1)',
            'InflationRate': 'rgba(39, 76, 119, 1)'
        });
        createChart('expenditureChartD', 'line', [...expenditureLabels, 'InflationRate'], yAxisExpenditureSettings);
    });


    // document.addEventListener('DOMContentLoaded', function () {
    //     var rawData = @Html.Raw(Model.GetChartDataAsJson());
    //     var expenditureLabels = ['PublicSafety', 'School', 'Other', 'Anomaly'];
    //     var colors = ['rgba(255, 190, 91, 1)', 'rgba(96, 150, 186, 1)', 'rgba(185, 209, 138, 1)', 'rgba(174, 174, 212, 1)', 'rgba(39, 76, 119, 1)'];

    //     function createChart(chartId, type, labels, yAxisSettings, customColors = {}) {
    //         var datasets = labels.map((label, index) => {
    //             var yAxisID = label === 'InflationRate' ? 'y1' : 'y';
    //             // Override default colors if custom color is provided for the label
    //             var backgroundColor = customColors[label] || colors[index % colors.length];
    //             var borderColor = customColors[label] || colors[index % colors.length];
    //             return {
    //                 label: label,
    //                 data: rawData.map(item => item[label]),
    //                 backgroundColor: backgroundColor,
    //                 borderColor: borderColor,
    //                 borderWidth: 2,
    //                 fill: type !== 'line',
    //                 yAxisID: yAxisID
    //             };
    //         });

    //         var ctx = document.getElementById(chartId).getContext('2d');
    //         return new Chart(ctx, {
    //             type: type,
    //             data: {
    //                 labels: rawData.map(item => item.Year.toString()),
    //                 datasets: datasets
    //             },
    //             options: {
    //                 scales: yAxisSettings,
    //                 plugins: {
    //                     legend: {
    //                         position: 'bottom'
    //                     }
    //                 }
    //             }
    //         });
    //     }

    //     var yAxisExpenditureSettings = {
    //         y: { beginAtZero: true, title: { display: true, text: 'Expenditure ($)' } },
    //         y1: {
    //             beginAtZero: true,
    //             position: 'right',
    //             title: { display: true, text: 'Rate' },
    //             grid: { drawOnChartArea: false }
    //         }
    //     };

    //     // Specify custom colors for the 'TotalExpenditure' in Chart A and Chart C
    //     createChart('expenditureChartA', 'bar', ['TotalExpenditure'], { y: { beginAtZero: true, title: { display: true, text: 'Total Expenditure ($)' } } }, { 'TotalExpenditure': 'rgba(96, 150, 186, 1)' });
    //     createChart('expenditureChartB', 'bar', expenditureLabels, { y: { beginAtZero: true, title: { display: true, text: 'Category Expenditure ($)' } } });
    //     createChart('expenditureChartC', 'line', ['TotalExpenditure', 'InflationRate'], yAxisExpenditureSettings, {
    //         'TotalExpenditure': 'rgba(96, 150, 186, 1)',
    //         'InflationRate': 'rgba(39, 76, 119, 1)'
    //     });
    //     createChart('expenditureChartD', 'line', [...expenditureLabels, 'InflationRate'], yAxisExpenditureSettings);
    // });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
    @if (TempData["Message"] != null)
    {
        <text>
                var message = JSON.parse('@Json.Serialize(TempData["Message"])');
            alert(message);
        </text>
    }
    });
</script>

